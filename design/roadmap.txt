Ginger Release Roadmap
======================

Release 0.8
-----------

Platforms
~~~~~~~~~
Version 0.8 will bebuild, install and tests run on the following:
* Linux (Ubuntu)
* Mac OS X

Basic Language Features
~~~~~~~~~~~~~~~~~~~~~~~

*  binding to single variables
*  assignment to single variables
*  if/unless N-way conditionals and switch expressions
*  short circuit conditionals (boolean & absent-oriented)
*  function applications and partial applications
*  higher-order functions with full lexical scoping
*  undecorated throws which are not catchable (escalated to failover)
*  garbage collection
*  autoloading and autoconversion
*  Environment variables via ${NAME} syntax.


Basic Datatypes
~~~~~~~~~~~~~~~

*  simple primitives: absent, booleans, undefined, indeterminate.
*  small integers and small integer arithmetic, overflowing to floating point.
*  floating point arithmatic.
*  ASCII strings, symbols and characters
*  singly linked lists (Lisp-style)
*  1D arrays (vectors)
*  maps and maplets, including weak hash tables
*  class objects

Toolchain
~~~~~~~~~

These tools are not supposed to be on the $PATH of a typical user and will 
be installed somewhere like /usr/local/libexec/ginger

* common2gnx:     a front-end for Common, converts to GingerXML. [docs]
* cstyle2gnx:     a front-end for a C-family syntax, converts to GingerXML. [docs+rename]
* simplifygnx:    a GingerXML simplifier and annotation tool. [docs]
* tidymnx:        a tool for pretty-printing MinXML (superset of GingerXML). [docs]
* fetchgnx:       a tool for accessing Project contents [docs+revise]
* ginger-cli:     a basic Ginger command-line interpreter (renaming of appginger). [docs+rename??]

Ginger
~~~~~~

A command-line interpreter, ginger, that coordinates the toolchain components to
provide an interactive shell for exploratory programming in a terminal. [design+docs+implement]

* Simple, single-line, terminal based interpreter.
  - Uses readline by default to provide command line editing.
  - Consumes stdin.
  - Interactive.
* Exceptions always escalate to failover.
* Traps failovers, reports them, resets, continues.
* Panics abort the system (not sure this is correct).
* Prints welcome banner.
* Selectable syntax via --grammar option.
* Starts up in ginger.interactive package.


Ginger CGI
~~~~~~~~~~
 
A CGI script runner, ginger-cgi (o.n.o.), that can be used to write CGI scripts 
[docs+spawn]

* supports #!/usr/local/bin/ginger-cgi (hash-bang) scripts.
* can be used interactively for testing.


Ginger #! Script Tool
~~~~~~~~~~~~~~~~~~~~~
A scripting tool, ginger-script (o.n.o.), that can be used to write UNIX scripts 
[design+docs+spawn]

* Immediately exits on error.
* Supports hash-bang scripting #!/usr/local/bin/ginger-script


Release 0.9
-----------

Basic Language Features
~~~~~~~~~~~~~~~~~~~~~~~
* Binding to multiple variables.
* Assignment to single variables.
* Anonymous variables.
* Final classes (without inheritance).
  - Slots
  - Constructors
  - Recognisers

Novel Language Features
~~~~~~~~~~~~~~~~~~~~~~~
* Explicit delay, implicit forcing.
* Partial application with ? syntax.

Common Syntax
~~~~~~~~~~~~~
* Curried definitions and lambdas.
* --pythonic: supports the python-style indentation that Graham and I discussed.


Basic Library
~~~~~~~~~~~~~
* Equality
* Simple file based I/O


Ginger
~~~~~~

* Traps keyboard-interrupts
* Uses a user/team/department/.../world preferences hierarchy 
* Provides the context of the current project and package
* Selectable syntax via ~/.config/ginger preferences

* Autolocates the current project 
  - current directory
  - --project option
  - ~/.config/ginger preferences

* Auto-imports the packages of the current project into the interactive
  package.

* Special command ‘macros’
  - !<unix command> - run a unix command in a subshell
  - help - integrated help - launches a web-browser? - using javascript for
    dynamic search?
  - imports - edits interactive imports
  - inspect - inspects variables (or the results of the last computation)



Ginger #! Script Tool
~~~~~~~~~~~~~~~~~~~~~

* Additionally supports being passed multiple scripts in Common syntax.
    % ginger-script script1.cmn script2.cmn script3.cmn
* Additionally supports executing from the standard input in any 
  supported syntax.
    % echo 'println( "hello world" );' | ginger-script -i -g common


Release 1.0
-----------

Platforms
~~~~~~~~~
* Linux: Debian (Ubuntu), Redhat (Fedora), OpenSUSE.
* Mac OS X
* Free BSD

Basic Language Features
~~~~~~~~~~~~~~~~~~~~~~~
* Single inheritance classes.
* Single dispatch methods.
  
Novel Features
~~~~~~~~~~~~~~
* First class virtual machines.

Documentation 
~~~~~~~~~~~~~

*  a overview of the Ginger project, the manifesto, the motivation, the roadmap. [todo]
*  all the tools in the toolchain [todo]
*  all the source formats (Common syntax, C-style syntax, GingerXML, MinimalMnx) 
       used in the toolchain. [todo]
*  the programs (ginger, ginger-cgi, ginger-script) [todo]
*  the Ginger language features [todo]
*  the Ginger classes and standard library [todo]

 * Integration with the Sublime 2 text editor [todo]
     - includes syntax colouring for the supported syntaxes (Common [done], C-Style [to be done]).
     - evaluation of supported syntaxes using ginger-script.


Ginger CGI
~~~~~~~~~~
 
* Additionally supports scripts invoked through Apache Action/AddHandler.
* Additionally supports apache CGIMapExtensions.
* Supports file upload.

Release 2.0
-----------

Basic Language Features
~~~~~~~~~~~~~~~~~~~~~~~
* Keyword arguments with default values (via the -with- keyword)
* Vectorclasses.
* Multiple inheritance.
* Essences.
* Multiple dispatch.

Novel Features
~~~~~~~~~~~~~~
* Alternative-returns (via the return keyword) escalating to panics.

Standard Library
~~~~~~~~~~~~~~~~
* File i/o.


Ginger
~~~~~~

* admin macro (or command?)
  - create new project folder (optionally make current)
  - unset/set/change current project (by folder)
  - remove current project
  - delete current project folder
  - query current project
  - create/edit/delete/query package in current project


Future Releases
---------------

Novel Features
~~~~~~~~~~~~~~
* Rollbacks.

Ginger
~~~~~~

* Long term development would be to become a terminal-based Project IDE suitable 
  for use over SSH.
* Emacs support.
