/*****************************************************************************\
Description
    INVOKE METHOD_TABLE DISPATCH_TABLE

Code
    None at this time.

Summary
    The purpose of INVOKE is to dispatch a core method on an
    object and its arguments. The argument count is held in VMCOUNT.

Stats
    Width = 3
    
Unchecked Precondition
    *   INVOKE only works as the 1st instruction of a lite function.
    *   It uses -ve offsets to access the fields before the key.
    *   There will be VMCOUNT + 1 values on the stack.
    
Exceptions (Checked Preconditions)
    Arity mismatch.
    
Result (Postcondition)      

\*****************************************************************************/

//  Get the arity from the field before the function key.
long A = ToLong( pc[ -2 ] );
//  Check the arguments.
if ( VMCOUNT != A ) {
    enter_error( VMCOUNT, A );
}

//  Get the subject.
Ref subject = VMVP[ A - 1 ];

//  Select the method fragment to call.
if ( IsObj( subject ) ) {
    Ref * subject_K = RefToPtr4( subject );
    Ref key = subject_K[ 0 ];
    
    //  Does the method cache contain this key?
    {
        Ref method_table = pc[ 1 ];
        if ( method_table != SYS_ABSENT ) {
            //  Is it the very first one?
            Ref * entry_K_orig = RefToPtr4( method_table );
            if ( key == entry_K_orig[ ASSOC_OFFSET_KEY ] ) {
                Ref fn = entry_K_orig[ ASSOC_OFFSET_VALUE ];
                Ref * fn_K = RefToPtr4( fn );
                VMPCFUNC = fn_K;
                RETURN( fn_K + 1 );
            }

            //  We will search the rest of the table.
            method_table = entry_K_orig[ ASSOC_OFFSET_NEXT ];
            while ( method_table != SYS_ABSENT ) {
                Ref * entry_K = RefToPtr4( method_table );
                if ( key == entry_K[ ASSOC_OFFSET_KEY ] ) {
                    
                    //  Re-order the table, switching the initial value with the current.
                    Ref fn = entry_K[ ASSOC_OFFSET_VALUE ];
                    entry_K[ ASSOC_OFFSET_KEY ] = entry_K_orig[ ASSOC_OFFSET_KEY ];
                    entry_K[ ASSOC_OFFSET_VALUE ] = entry_K_orig[ ASSOC_OFFSET_VALUE ];
                    entry_K_orig[ ASSOC_OFFSET_KEY ] = key;
                    entry_K_orig[ ASSOC_OFFSET_VALUE ] = fn;

                    //  And chain out.
                    Ref * fn_K = RefToPtr4( fn );
                    VMPCFUNC = fn_K;
                    RETURN( fn_K + 1 );

                } else {
                    method_table = entry_K[ ASSOC_OFFSET_NEXT ];
                }
            }
        }
    }
    
    {
        //  Ensure that there is enough room to add into the method
        //  cache.
        if ( vm->heap().wouldGC( ASSOC_SIZE ) ) {
            vm->heap().preflight( pc, ASSOC_SIZE );
            //  This will have trashed the local variables so we simply
            //  retry! It's not efficient but it is exceedingly rare.
            RETURN( pc );   //  <---- Loop!!
        }
    }
    
    //  Not in the method cache. Attempt to look it up in the method-table.
    if ( IsObj( key ) ) {
        //Ref * key_K = RefToPtr4( key );   
        Ref dispatch_table = pc[2];
        while ( dispatch_table != SYS_ABSENT ) {
            Ref * entry_K = RefToPtr4( dispatch_table );
            if ( key == entry_K[ ASSOC_OFFSET_KEY ] ) { 
                Ref fn = entry_K[ ASSOC_OFFSET_VALUE ];
                
                //  Add to the method cache.
                {
                    vm->gcVeto();
                    XfrClass xfr( vm->heap().preflight( pc, ASSOC_SIZE ) );
                    xfr.setOrigin();
                    xfr.xfrRef( sysAssocKey );
                    xfr.xfrRef( key );
                    xfr.xfrRef( fn );
                    xfr.xfrRef( pc[1] );    //  Reference to the current method table entry.
                    pc[1] = xfr.makeRef();
                    vm->gcLiftVeto();
                }
                
                //  Now we chain into the fragment we have recovered, utilising the
                //  fact that this is a lightweight call.
                
                Ref * fn_K = RefToPtr4( fn );
                
                //  Leave VMLINK & VMLINKFUNC alone.
                //  The lite function has not stashed them into the callstack.
                //  As a consequence we can chain directly without meddling with
                //  them.
                
                VMPCFUNC = fn_K;
                RETURN( fn_K + 1 );
            } else {
                dispatch_table = entry_K[ ASSOC_OFFSET_NEXT ];
            }
        }   
        /* Failed to find a matching method */
    }
}
invoke_error();
RETURN( pc );   // IDIOT COMPILER. Only here to suppress daft complaints.
