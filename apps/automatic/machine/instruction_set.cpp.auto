const char * InstructionSet::name( Ref spc ) const {
    return(
        spc == spc_add ? "add" :
        spc == spc_decr ? "decr" :
        spc == spc_div ? "div" :
        spc == spc_eq ? "eq" :
        spc == spc_neq ? "neq" :
        spc == spc_gt ? "gt" :
        spc == spc_gte ? "gte" :
        spc == spc_incr ? "incr" :
        spc == spc_incr_by ? "incr_by" :
        spc == spc_lt ? "lt" :
        spc == spc_lte ? "lte" :
        spc == spc_mul ? "mul" :
        spc == spc_sub ? "sub" :
        spc == spc_calls ? "calls" :
        spc == spc_chainlite ? "chainlite" :
        spc == spc_check_count ? "check_count" :
        spc == spc_check_mark0 ? "check_mark0" :
        spc == spc_check_mark1 ? "check_mark1" :
        spc == spc_end_mark ? "end_mark" :
        spc == spc_end1_calls ? "end1_calls" :
        spc == spc_end_call_global ? "end_call_global" :
        spc == spc_enter ? "enter" :
        spc == spc_enter0 ? "enter0" :
        spc == spc_enter1 ? "enter1" :
        spc == spc_eq_si ? "eq_si" :
        spc == spc_eq_ss ? "eq_ss" :
        spc == spc_field ? "field" :
        spc == spc_getiterator ? "getiterator" :
        spc == spc_goto ? "goto" :
        spc == spc_gt_si ? "gt_si" :
        spc == spc_gt_ss ? "gt_ss" :
        spc == spc_gte_si ? "gte_si" :
        spc == spc_gte_ss ? "gte_ss" :
        spc == spc_halt ? "halt" :
        spc == spc_ifnot ? "ifnot" :
        spc == spc_ifso ? "ifso" :
        spc == spc_invoke ? "invoke" :
        spc == spc_listiterate ? "listiterate" :
        spc == spc_lt_si ? "lt_si" :
        spc == spc_lt_ss ? "lt_ss" :
        spc == spc_lte_si ? "lte_si" :
        spc == spc_lte_ss ? "lte_ss" :
        spc == spc_neq_si ? "neq_si" :
        spc == spc_neq_ss ? "neq_ss" :
        spc == spc_not ? "not" :
        spc == spc_pop_global ? "pop_global" :
        spc == spc_pop_local ? "pop_local" :
        spc == spc_push_global ? "push_global" :
        spc == spc_push_local ? "push_local" :
        spc == spc_push_local0 ? "push_local0" :
        spc == spc_push_local1 ? "push_local1" :
        spc == spc_pushq ? "pushq" :
        spc == spc_reset ? "reset" :
        spc == spc_return ? "return" :
        spc == spc_set ? "set" :
        spc == spc_set_call_global ? "set_call_global" :
        spc == spc_set_calls ? "set_calls" :
        spc == spc_set_syscall ? "set_syscall" :
        spc == spc_start_mark ? "start_mark" :
        spc == spc_stringiterate ? "stringiterate" :
        spc == spc_syscall ? "syscall" :
        spc == spc_syscall_arg ? "syscall_arg" :
        spc == spc_syscall_dat ? "syscall_dat" :
        spc == spc_syscall_argdat ? "syscall_argdat" :
        spc == spc_sysreturn ? "sysreturn" :
        spc == spc_vectoriterate ? "vectoriterate" :
        "?"
    );
}

const char * InstructionSet::signature( Ref x ) const {
    if ( x == spc_incr_by ) return "ir";
    if ( x == spc_chainlite ) return "icr";
    if ( x == spc_check_count ) return "ir";
    if ( x == spc_check_mark0 ) return "ir";
    if ( x == spc_check_mark1 ) return "ir";
    if ( x == spc_end_mark ) return "ir";
    if ( x == spc_end1_calls ) return "ir";
    if ( x == spc_end_call_global ) return "irv";
    if ( x == spc_eq_si ) return "irrr";
    if ( x == spc_eq_ss ) return "irrr";
    if ( x == spc_field ) return "ir";
    if ( x == spc_goto ) return "ir";
    if ( x == spc_gt_si ) return "irrr";
    if ( x == spc_gt_ss ) return "irrr";
    if ( x == spc_gte_si ) return "irrr";
    if ( x == spc_gte_ss ) return "irrr";
    if ( x == spc_ifnot ) return "ir";
    if ( x == spc_ifso ) return "ir";
    if ( x == spc_invoke ) return "icc";
    if ( x == spc_lt_si ) return "irrr";
    if ( x == spc_lt_ss ) return "irrr";
    if ( x == spc_lte_si ) return "irrr";
    if ( x == spc_lte_ss ) return "irrr";
    if ( x == spc_neq_si ) return "irrr";
    if ( x == spc_neq_ss ) return "irrr";
    if ( x == spc_pop_global ) return "iv";
    if ( x == spc_pop_local ) return "ir";
    if ( x == spc_push_global ) return "iv";
    if ( x == spc_push_local ) return "ir";
    if ( x == spc_pushq ) return "ic";
    if ( x == spc_set ) return "ir";
    if ( x == spc_set_call_global ) return "irv";
    if ( x == spc_set_calls ) return "ir";
    if ( x == spc_set_syscall ) return "irr";
    if ( x == spc_start_mark ) return "ir";
    if ( x == spc_syscall ) return "ir";
    if ( x == spc_syscall_arg ) return "irc";
    if ( x == spc_syscall_dat ) return "irr";
    if ( x == spc_syscall_argdat ) return "ircr";
    return "i";
}

Ref InstructionSet::lookup( Instruction instr ) const {
    switch ( instr ) {
    case vmc_add: return this->spc_add;
    case vmc_decr: return this->spc_decr;
    case vmc_div: return this->spc_div;
    case vmc_eq: return this->spc_eq;
    case vmc_neq: return this->spc_neq;
    case vmc_gt: return this->spc_gt;
    case vmc_gte: return this->spc_gte;
    case vmc_incr: return this->spc_incr;
    case vmc_incr_by: return this->spc_incr_by;
    case vmc_lt: return this->spc_lt;
    case vmc_lte: return this->spc_lte;
    case vmc_mul: return this->spc_mul;
    case vmc_sub: return this->spc_sub;
    case vmc_calls: return this->spc_calls;
    case vmc_chainlite: return this->spc_chainlite;
    case vmc_check_count: return this->spc_check_count;
    case vmc_check_mark0: return this->spc_check_mark0;
    case vmc_check_mark1: return this->spc_check_mark1;
    case vmc_end_mark: return this->spc_end_mark;
    case vmc_end1_calls: return this->spc_end1_calls;
    case vmc_end_call_global: return this->spc_end_call_global;
    case vmc_enter: return this->spc_enter;
    case vmc_enter0: return this->spc_enter0;
    case vmc_enter1: return this->spc_enter1;
    case vmc_eq_si: return this->spc_eq_si;
    case vmc_eq_ss: return this->spc_eq_ss;
    case vmc_field: return this->spc_field;
    case vmc_getiterator: return this->spc_getiterator;
    case vmc_goto: return this->spc_goto;
    case vmc_gt_si: return this->spc_gt_si;
    case vmc_gt_ss: return this->spc_gt_ss;
    case vmc_gte_si: return this->spc_gte_si;
    case vmc_gte_ss: return this->spc_gte_ss;
    case vmc_halt: return this->spc_halt;
    case vmc_ifnot: return this->spc_ifnot;
    case vmc_ifso: return this->spc_ifso;
    case vmc_invoke: return this->spc_invoke;
    case vmc_listiterate: return this->spc_listiterate;
    case vmc_lt_si: return this->spc_lt_si;
    case vmc_lt_ss: return this->spc_lt_ss;
    case vmc_lte_si: return this->spc_lte_si;
    case vmc_lte_ss: return this->spc_lte_ss;
    case vmc_neq_si: return this->spc_neq_si;
    case vmc_neq_ss: return this->spc_neq_ss;
    case vmc_not: return this->spc_not;
    case vmc_pop_global: return this->spc_pop_global;
    case vmc_pop_local: return this->spc_pop_local;
    case vmc_push_global: return this->spc_push_global;
    case vmc_push_local: return this->spc_push_local;
    case vmc_push_local0: return this->spc_push_local0;
    case vmc_push_local1: return this->spc_push_local1;
    case vmc_pushq: return this->spc_pushq;
    case vmc_reset: return this->spc_reset;
    case vmc_return: return this->spc_return;
    case vmc_set: return this->spc_set;
    case vmc_set_call_global: return this->spc_set_call_global;
    case vmc_set_calls: return this->spc_set_calls;
    case vmc_set_syscall: return this->spc_set_syscall;
    case vmc_start_mark: return this->spc_start_mark;
    case vmc_stringiterate: return this->spc_stringiterate;
    case vmc_syscall: return this->spc_syscall;
    case vmc_syscall_arg: return this->spc_syscall_arg;
    case vmc_syscall_dat: return this->spc_syscall_dat;
    case vmc_syscall_argdat: return this->spc_syscall_argdat;
    case vmc_sysreturn: return this->spc_sysreturn;
    case vmc_vectoriterate: return this->spc_vectoriterate;
    }
    throw Mishap( "Bad instruction" );
}

