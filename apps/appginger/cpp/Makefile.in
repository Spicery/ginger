prefix=@prefix@
exec_prefix=@prefix@
datarootdir=@datarootdir@
PACKAGE_TARNAME=@PACKAGE_TARNAME@
INSTALL_BIN=@bindir@
INSTALL_TOOL=@libexecdir@/@PACKAGE_TARNAME@
INSTALL_LIB=@datarootdir@/@PACKAGE_TARNAME@
INSTALL_DOC=@docdir@


#LICENSE_FILE="$(INSTALL_LIB)/COPYING"
#LICENSE_FILE="$(INSTALL_LIB)/COPYING"


CC=@CXX@

INSTALLDIRS=-DINSTALL_BIN='"$(INSTALL_BIN)"' -DINSTALL_LIB='"$(INSTALL_LIB)"' -DINSTALL_TOOL='"$(INSTALL_TOOL)"'

CXXFLAGS=-DRUDECGI $(INSTALLDIRS) -g -I../hpp -I../../libgng/hpp -I../../automatic/machine -I../../automatic/sys -I../../automatic/simple -I/opt/local/include -Wall -Wnon-virtual-dtor -L/opt/local/lib 
CFLAGS=-Wmissing-prototypes 

OBJS=package_autoload.o term.o read_xml.o \
	functor.o plant.o cage.o vmi.o registers.o roots.o \
	rcep.o arity.o resolve.o lift.o ident.o \
	dict.o package.o \
	sys.o syskey.o sysclass.o sysequals.o sysprint.o syslist.o sysvector.o \
	sysstring.o syssymbol.o sysmap.o sysindirection.o sysinstance.o \
	syselement.o syscheck.o sysexception.o \
	syscgi.o sysattrmap.o sysmixed.o \
	sysfunction.o sysmethod.o sysunix.o \
	destination.o heap.o key.o \
	misclayout.o listlayout.o \
	maplayout.o functionlayout.o \
	vectorlayout.o stringlayout.o \
	heapcrawl.o cagecrawl.o callstackcrawl.o fnobjcrawl.o \
	garbagecollect.o \
	scanfunc.o scandict.o \
	machine.o instruction_set.o \
	machine1.o instruction_set1.o \
	machine2.o instruction_set2.o \
	machine3.o instruction_set3.o \
	machine4.o instruction_set4.o \
	appcontext.o \
	makesysfn.o

all: appginger ginger-cgi ginger-script

# $@ is make shorthand for the target.
# $@ is make shorthand for the dependencies
appginger: libappginger.a toolmain.o main.o
	ranlib libappginger.a ../../libgng/cpp/libgng.a
	@CXX@ $(CXXFLAGS) $(BOOST_CPPFLAGS) -o $@ main.o toolmain.o libappginger.a ../../libgng/cpp/libgng.a /usr/local/lib/librudecgi.a  -lboost_iostreams

ginger-cgi: libappginger.a toolmain.o cgimain.o
	ranlib libappginger.a ../../libgng/cpp/libgng.a
	@CXX@ $(CXXFLAGS) $(BOOST_CPPFLAGS) -o $@ cgimain.o toolmain.o libappginger.a ../../libgng/cpp/libgng.a /usr/local/lib/librudecgi.a  -lboost_iostreams

ginger-script: libappginger.a toolmain.o scriptmain.o
	ranlib libappginger.a ../../libgng/cpp/libgng.a
	@CXX@ $(CXXFLAGS) $(BOOST_CPPFLAGS) -o $@ scriptmain.o toolmain.o libappginger.a ../../libgng/cpp/libgng.a /usr/local/lib/librudecgi.a  -lboost_iostreams



clean:
	rm -f *.o
	rm -f appginger ginger-cgi ginger-script
	rm -f *.a

#	Nothing needs doing.
check:
	
libappginger.a: $(OBJS)
	ar -rcs $@ $+
