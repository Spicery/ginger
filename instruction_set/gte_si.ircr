/*****************************************************************************\
Definition
	* GTE_SI( LOCAL_S: raw, VALUE_B:constant, JUMP_D: raw )

Code
    <gte.si local=LOCAL value=VALUE_B to=JUMP_D />
    
Summary
	Compares a local variable LOCAL_S using greater than or equal to versus a 
	number VALUE_B and if true jumps to JUMP_D, otherwise falls through.

Unchecked Precondition
	* JUMP_D is in range of the enclosing function object.
	* LOCAL_S is a valid index for local variables of the 
	  enclosing function object.
	* VALUE_B is a number.

	Q: Should this be marked as rrr?
	
Exceptions (Checked Preconditions)
	* LOCAL[ S ] must be a number.
	
Result (Postcondition)		
	* 	Control is transferred to the target forwards or backwards if
		a numerical local variables is greater-than-or-equal to a constant.

Tags
	* Arithmetic comparison

\*****************************************************************************/

long s = ToLong( pc[1] );
Ref a = LOCAL( s );
Ref b = pc[2];

if ( IsSmall( a ) ) {
	if ( IsSmall( b ) ) {
		RETURN( ToLong( a ) >= ToLong( b ) ? pc + ToLong( pc[3] ) + 3 : pc + 4 );
	} else if ( IsDouble( b ) ) {
		RETURN( static_cast< gngdouble_t >( SmallToLong( a ) ) >= gngFastDoubleValue( b ) ? pc + ToLong( pc[3] ) + 3 : pc + 4 );
	}
} else if ( IsDouble( a ) ) {
	if ( IsSmall( b ) ) {
		RETURN( gngFastDoubleValue( a ) >= static_cast< gngdouble_t >( SmallToLong( b ) ) ? pc + ToLong( pc[3] ) + 3 : pc + 4 );
	} else if ( IsDouble( b ) ) {
		RETURN( gngFastDoubleValue( a ) >= gngFastDoubleValue( b ) ? pc + ToLong( pc[3] ) + 3 : pc + 4 );
	} 
} 
RETURN( sysCompareNumbers( a, b, false, true, true ) ? pc + ToLong( pc[3] ) + 3 : pc + 4 );
