prefix=@prefix@
exec_prefix=@prefix@
datarootdir=@datarootdir@
PACKAGE_TARNAME=@PACKAGE_TARNAME@
INSTALL_BIN=@bindir@
INSTALL_TOOL=@libexecdir@/@PACKAGE_TARNAME@
INSTALL_LIB=@datarootdir@/@PACKAGE_TARNAME@
INSTALL_DOC=@docdir@
USESNAP=@usesnap@

#LICENSE_FILE="$(INSTALL_LIB)/COPYING"
#LICENSE_FILE="$(INSTALL_LIB)/COPYING"

CXX=@CXX@
CC=@CXX@

INSTALLDIRS=-DINSTALL_BIN='"$(INSTALL_BIN)"' -DINSTALL_LIB='"$(INSTALL_LIB)"' -DINSTALL_TOOL='"$(INSTALL_TOOL)"'

CXXFLAGS:=-DRUDECGI $(INSTALLDIRS) -DUSESNAP=$(USESNAP) -g -std=c++14 -I../hpp -I../../libgng/hpp -I../../automatic/machine -I../../automatic/sys -I../../automatic/sysfn -I../../automatic/simple -Wall -Wnon-virtual-dtor
ifeq ($(shell uname),Darwin)
	CXXFLAGS:=$(CXXFLAGS) -I/usr/local/include
endif


# In order to exclude machine implementations, uncomment one or more of
# the following lines.
#CXXFLAGS += -DMACHINE1_EXCLUDED
#CXXFLAGS += -DMACHINE2_EXCLUDED
#CXXFLAGS += -DMACHINE3_EXCLUDED
#CXXFLAGS += -DMACHINE4_EXCLUDED


OBJS= syscrypto.o bigint.o rational.o sysvm.o \
	inputstreamexternal.o outputstreamexternal.o \
	cagefinder.o cell.o refprint.o vident.o codegen.o \
	simplify.o cage.o registers.o roots.o cmp.o \
	rcep.o label.o package.o \
	sys.o syscharacter.o sysmaths.o \
	syskey.o sysclass.o sysequals.o sysprint.o syslist.o sysvector.o \
	sysstring.o syssymbol.o sysmap.o sysindirection.o sysinstance.o \
	syselement.o syscheck.o sysexception.o sysdouble.o sysstack.o \
	sysstream.o  \
	syscgi.o sysattrmap.o sysmixed.o sysapply.o \
	sysfunction.o sysmethod.o sysunix.o \
	destination.o heap.o key.o \
	misclayout.o listlayout.o \
	maplayout.o functionlayout.o \
	vectorlayout.o stringlayout.o wrecordlayout.o \
	heapcrawl.o cagecrawl.o callstackcrawl.o fnobjcrawl.o \
	garbagecollect.o scanfunc.o scanpkg.o \
	machine.o instruction_set.o enginefactory.o \
	machine1.o instruction_set1.o \
	machine2.o instruction_set2.o \
	machine3.o instruction_set3.o \
	machine4.o instruction_set4.o \
	appcontext.o \
	makesysfn.o \
	toolmain.o userinput.o

USEREXECUTABLES=ginger-cgi ginger-script ginger-cli ginger-info

all: $(USEREXECUTABLES) system.db info-debug.rst info-debug.hlp

################################################################################
# We need to disable optimisations based on non-overflow of integer 
# arithmetic when compiling the machine implementations. That entails
# adding the -fwrapv flag.
################################################################################

machine%.o: machine%.cpp
	$(CXX) $(CXXFLAGS) -fwrapv -c $<

instruction_set%.o: instruction_set%.cpp
	$(CXX) $(CXXFLAGS) -fwrapv -c $<


################################################################################
# 	Main executables
################################################################################

LIBAPPGINGER:=
ifneq ($(shell uname),Darwin)
	LIBAPPGINGER=-Wl,--whole-archive libappginger.a -Wl,--no-whole-archive
else
	LIBAPPGINGER=-Wl,-force_load libappginger.a -L/usr/local/lib
endif

LIBRARIES=../../libgng/cpp/libgng.a /usr/local/lib/librudecgi.a -lgmp -lgmpxx -lcrypto -lssl -lreadline

# $@ is make shorthand for the target.
# $@ is make shorthand for the dependencies
ginger-info: libappginger.a infomain.o
	#ranlib libappginger.a ../../libgng/cpp/libgng.a
	$(CXX) $(CXXFLAGS) $(BOOST_CPPFLAGS) -o $@ infomain.o $(LIBAPPGINGER) $(LIBRARIES)

info-debug.hlp: ginger-info
	./ginger-info -H > info-debug.hlp

info-debug.rst: ginger-info
	./ginger-info -r > info-debug.rst

info-debug.db: ginger-info
	# Going around the houses with file renaming because if the command fails the target file must not exist.
	./ginger-info -ji | python3 make_info_db.py
	mv info-debug.tmp info-debug.db

../../../instruction_set/instruction.db: 
	( cd ../../../instruction_set; make -f InstructionSetDB.makefile build )

system.db: info-debug.db ../../../instruction_set/instruction.db
	rm -f system.db
	sqlite3 info-debug.db '.dump' | sqlite3 system.db
	sqlite3 ../../../instruction_set/instruction_set.db '.dump' | sqlite3 system.db

ginger-cli: libappginger.a climain.o
	$(CXX) $(CXXFLAGS) $(BOOST_CPPFLAGS) -o $@ climain.o $(LIBAPPGINGER) $(LIBRARIES)

ginger-cgi: libappginger.a cgimain.o
	$(CXX) $(CXXFLAGS) $(BOOST_CPPFLAGS) -o $@ cgimain.o $(LIBAPPGINGER) $(LIBRARIES)

ginger-script: libappginger.a scriptmain.o
	$(CXX) $(CXXFLAGS) $(BOOST_CPPFLAGS) -o $@ scriptmain.o $(LIBAPPGINGER) $(LIBRARIES)

clean:
	rm -f *.o
	rm -f $(USEREXECUTABLES)
	rm -f *.a
	rm -f info-debug.*
	rm -f system.db

#	Nothing needs doing.
check:
	
libappginger.a: $(OBJS)
	ar -rcs libappginger.a.tmp $+
	ranlib libappginger.a.tmp
	mv libappginger.a.tmp $@
