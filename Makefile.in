all:
	$(MAKE) -C apps $@
	$(MAKE) -C autodocs $@
	$(MAKE) -C projects $@

clean:
	rm -rf _build/
	$(MAKE) -C apps $@
	$(MAKE) -C autodocs $@
	$(MAKE) -C projects $@

distclean: clean
	rm -f Makefile
	rm -f apps/Makefile
	rm -f apps/appginger/Makefile
	rm -f apps/appginger/cpp/Makefile
	rm -f apps/appginger/unittest/Makefile
	rm -f apps/automatic/machine/Makefile
	rm -f apps/automatic/metainfo/Makefile
	rm -f apps/automatic/simple/Makefile
	rm -f apps/automatic/sys/Makefile
	rm -f apps/common2gnx/Makefile
	rm -f apps/common2gnx/cpp/Makefile
	rm -f apps/fetchgnx/Makefile
	rm -f apps/fetchgnx/cpp/Makefile
	rm -f apps/fetchgnx/unittest/Makefile
	rm -f apps/file2gnx/Makefile
	rm -f apps/file2gnx/cpp/Makefile
	rm -f apps/file2gnx/unittest/Makefile
	rm -f apps/ginger-admin/Makefile
	rm -f apps/ginger-admin/cpp/Makefile
	rm -f apps/ginger-help/Makefile
	rm -f apps/ginger-help/cpp/Makefile
	rm -f apps/gngreadline/Makefile
	rm -f apps/gngreadline/cpp/Makefile
	rm -f apps/libgng/Makefile
	rm -f apps/libgng/cpp/Makefile
	rm -f apps/libgng/unittest/Makefile
	rm -f apps/libmetainfo/Makefile
	rm -f apps/libmetainfo/cpp/Makefile
	rm -f apps/libmetainfo/unittest/Makefile
	rm -f apps/lisp2gnx/Makefile
	rm -f apps/lisp2gnx/lsp/Makefile
	rm -f apps/tidymnx/Makefile
	rm -f apps/tidymnx/cpp/Makefile
	rm -f apps/shebang/Makefile
	rm -f apps/shebang/cpp/Makefile
	rm -f apps/simplifygnx/Makefile
	rm -f apps/simplifygnx/cpp/Makefile
	rm -f apps/simplifygnx/unittest/Makefile
	rm -f apps/gson2gnx/Makefile
	rm -f apps/gson2gnx/cpp/Makefile
	rm -f apps/lnx2mnx/Makefile
	rm -f apps/lnx2mnx/cpp/Makefile
	rm -f apps/src2lnx/Makefile
	rm -f apps/src2lnx/cpp/Makefile
	rm -f apps/lnx2csv/Makefile
	rm -f apps/lnx2csv/cpp/Makefile
	rm -f apps/autodocs/Makefile
	rm -f projects/Makefile
	rm -f config.h
	rm -f config.status
	rm -f config.log
	rm -f autom4te.cache/*.* autom4te.cache/requests
	rmdir -p autom4te.cache
	rm -f configure

# EPREFIX should be bound to PREFIX by default. This appears to be a lie.
# As a consequence we override EPREFIX entirely. Probably incorrect but not
# that interesting.
prefix=@prefix@
exec_prefix=@prefix@
datarootdir=@datarootdir@
PACKAGE_TARNAME=@PACKAGE_TARNAME@
INSTALL_BIN=@bindir@
INSTALL_TOOL=@libexecdir@/@PACKAGE_TARNAME@
INSTALL_LIB=@datarootdir@/@PACKAGE_TARNAME@
INSTALL_DOC=@docdir@

USEREXECUTABLES=\
	apps/appginger/cpp/ginger-cgi \
	apps/appginger/cpp/ginger-script \
	apps/appginger/cpp/ginger 

LIBEXECUTABLES=\
	apps/appginger/cpp/appginger \
	apps/common2gnx/cpp/common2gnx \
	apps/common2gnx/cpp/cstyle2gnx \
	apps/fetchgnx/cpp/fetchgnx \
	apps/file2gnx/cpp/file2gnx \
	apps/appginger/cpp/ginger-cli \
	apps/ginger-admin/cpp/ginger-admin \
	apps/ginger-help/cpp/ginger-help \
	apps/appginger/cpp/ginger-info \
	apps/gngreadline/cpp/gngreadline \
	apps/lisp2gnx/lsp/lisp2gnx \
	apps/shebang/cpp/shebang \
	apps/simplifygnx/cpp/simplifygnx \
	apps/tidymnx/cpp/tidymnx \
	apps/gson2gnx/cpp/gson2gnx \
	apps/src2lnx/cpp/src2lnx \
	apps/lnx2csv/cpp/lnx2csv \
	apps/lnx2mnx/cpp/lnx2mnx

install: all install-as-is

install-as-is:
	# Installing user binaries into $(INSTALL_BIN)
	# Installing toolchain binaries into $(INSTALL_TOOL)
	# Installing support files $(INSTALL_LIB)
	mkdir -p $(INSTALL_LIB)
	mkdir -p $(INSTALL_TOOL)
	cp -r apps/ginger-admin/admin-templates $(INSTALL_LIB)
	cp -r projects/standard_library $(INSTALL_LIB) 
	#echo Installing docs into $(INSTALL_DOC)
	mkdir -p $(INSTALL_LIB)
	/usr/bin/install -m a=r COPYING $(INSTALL_LIB)
	mkdir -p $(INSTALL_LIB)/lisp2gnx
	/usr/bin/install -m a=r apps/lisp2gnx/lsp/lisp2gnx.lsp $(INSTALL_LIB)/lisp2gnx
	/usr/bin/install $(LIBEXECUTABLES) $(INSTALL_TOOL)
	/usr/bin/install $(USEREXECUTABLES) $(INSTALL_BIN)
	# Add in the convenience links
	( cd $(INSTALL_BIN); ln -sf ginger-script ginger-common )
	( cd $(INSTALL_BIN); ln -sf ginger-script ginger-ctyle )
	# Copy the autodocs
	mkdir -p $(INSTALL_LIB)/autodocs
	( cd autodocs/_build ; tar cf - . ) | ( cd $(INSTALL_LIB)/autodocs ; tar xf - )

# N.B. The rm -rf commands are guarded by code that checks the
# paths end '/ginger'
uninstall:
	# Removing user binaries from $(INSTALL_BIN)
	rm -f $(INSTALL_BIN)/ginger
	rm -f $(INSTALL_BIN)/ginger-*
ifeq (ginger,$(notdir $(INSTALL_TOOL)))
	# Removing the toolchain binaries from $(INSTALL_TOOL)
	rm -rf $(INSTALL_TOOL)
endif
ifeq (ginger,$(notdir $(INSTALL_LIB)))
	# Removing the support files from $(INSTALL_LIB)
	rm -rf $(INSTALL_LIB)
endif

# Create a tarball for binary archive.
TBBASE=ginger_files
TBPACKAGE=ginger
TBPREFIX=usr/local
TBMAIN=${TBBASE}/${TBPREFIX}
TBTOOL=${TBMAIN}/libexec/ginger
TBBIN=${TBMAIN}/bin
TBOUTPUT=ginger-files.tgz
TBBUILDINFO=$(TBPACKAGE)/BUILD_INFO.txt

tarball-clean:
	mkdir -p _build
	rm -f _build/$(TBOUTPUT)
	rm -rf _build/$(TBBASE)
	rm -rf _build/$(TBPACKAGE)

tarball: all tarball-as-is

tarball-as-is:
	make tarball-clean
	mkdir -p _build/$(TBPACKAGE)
	mkdir -p _build/$(TBTOOL)
	mkdir -p _build/$(TBBIN)
	mkdir -p _build/$(TBMAIN)/share/ginger
	( cd build_template; tar cf - . ) | ( cd _build/$(TBPACKAGE); tar xf - )
	cp $(LIBEXECUTABLES) _build/$(TBTOOL)
	cp $(USEREXECUTABLES) _build/$(TBBIN)
	( cd _build/$(TBBIN); ln -sf ginger-script ginger-common )
	( cd _build/$(TBBIN); ln -sf ginger-script ginger-ctyle )
	cp COPYING _build/$(TBMAIN)/share/ginger
	cp AUTHORS _build/$(TBMAIN)/share/ginger
	mkdir -p _build/$(TBMAIN)/share/ginger/lisp2gnx/
	cp apps/lisp2gnx/lsp/lisp2gnx.lsp _build/$(TBMAIN)/share/ginger/lisp2gnx/
	cp -r projects/standard_library _build/$(TBMAIN)/share/ginger/

	# Copy autodocs.
	mkdir -p _build/$(TBMAIN)/share/ginger/autodocs
	( cd autodocs/_build ; tar cf - . ) | ( cd _build/$(TBMAIN)/share/ginger/autodocs ; tar xf - )

	# Cleanup.
	find _build -type d -name .svn | xargs /bin/rm -rf
	find _build -name '.DS_STORE' | xargs rm -f
	find _build -name '._*'

	# Build info.
	make tarball-as-is-build-info

	# Package tarballs.
	( cd _build/$(TBMAIN); tar cf - . ) | gzip > _build/$(TBPACKAGE)/$(TBOUTPUT)
	( cd _build; tar cf - $(TBPACKAGE) ) | gzip > _build/$(TBPACKAGE).tgz

tarball-as-is-build-info:
	touch _build/$(TBBUILDINFO)
	echo "Ginger Tarball Build-time Information" >> _build/$(TBBUILDINFO)
	echo "-------------------------------------" >> _build/$(TBBUILDINFO)
	echo "date         : " `date` >> _build/$(TBBUILDINFO)
	echo "uname -mn    : " `uname -mn` >> _build/$(TBBUILDINFO)
	echo "uname -rsv   : " `uname -rsv` >> _build/$(TBBUILDINFO)
	( cd _build/$(TBBASE); echo "space needed : " `du -shc | grep total` ) >> _build/$(TBBUILDINFO)

unitcheck:
	# To be done

funccheck:
	(cd functests; nosetests)

syscheck:
	(cd systests; nosetests)

check:
	make unitcheck
	make funccheck
	make syscheck
