Note on the Design of Exceptions
================================

Four Types of Exception
-----------------------

The objective is to be able to implement the following 4 types of
exception. Note that all four are implemented as exceptions that do not
capture the stack trace. Capturing the stack trace is regarded as a debugging
feature.

  * Escape - an escape works rather like a return, except that it
    has to be explicitly handled. The escape can pass out values
    representing the alternative exit scenario.
    
    Failing to handle an escape escalates to a rollback.

    Suggested syntax
        
        throw EVENT( EXPR, ... ) [ rethrow EVENT ![![!]] ] [ with BINDINGS ]
        
        try APPLY_EXPR
        catch ( PATTERN, ... ) then STMNTS
        catch EVENT( PATTERN, ... ) then STMNTS 
        ...
        [ else STMNTS ]
        endtry

    Notes
        If the normal return handler is not present then a default
        handler is provided

            catch ( args... ) then args...
    


  * Rollback - these are matched with transaction-catch blocks,
    which are like try-catch with a super-power. When a transaction
    is rolled back the state of the virtual machine is completely 
    restored to the point at which the transaction is entered. Only
    the simplest flags may survive a rollback.
    
    Obviously, transactions are potentially expensive - because they need
    to ensure that all object updates can be reversed (possibly by
    copying the entire virtual machine on entry!).
    
    If a rollback is not caught by a transaction block, it is promptly
    escalated as a failover.

    Suggested syntax:

        throw EVENT ! [ rethrow EVENT !![!] ] [ with BINDINGS ]
        
        transaction STMNTS
        catch EVENT then STMNTS
        ...
        [ else STMNTS ]
        endtransaction


  * Failover - I have not completely decided on the terminology here.
    The basic idea is that this is an emergency shutdown of the current
    virtual machine. The long term plan is that a Ginger application is
    a group of virtual machines, so when one machine shutsdown, another
    can pick up from where it left off.
    
    If a failover is not actually picked up by the Ginger Runtime, then
    it escalates to a panic.

    Note that a virtual machine failing-over is regarded as a relatively
    normal situation. As a consequence perhaps a try/catch block in supervisor 
    is the right solution? This doesn't strike me as quite right as we
    need concurrent processing. Perhaps it makes more sense to have some
    kind of event-handling construct.

    Suggested syntax:

        throw EVENT !! [ rethrow EVENT !!! ] [ with BINDINGS ]
        
        try vm.run() catch EVENT then ... else ... endtry


  * A panic is an invocation of the host operating systems' process exit.
    Execution is brought to a swift halt. This is not-trappable in any
    useful sense.

    Suggested syntax:

        throw TAG !!! [ with BINDINGS ]
        

Ginger XML
----------

    EVENT_LEVEL ::= "escape" | "rollback" | "failover" | "panic"
    
    THROW ::=
        <throw level=EVENT_LEVEL event=EVENT_NAME>
            EVENT
            EXPR
            [ OPTIONAL_ARGS ]
        </escape>

    <rethrow event=EVENT_NAME level=EVENT_LEVEL>
        THROW
        EXPR
        [ OPTIONAL_ARGS ]
    </rethrow>

    <try level=EVENT_LEVEL>
        EXPR
        <catch.return>
            PATTERN
            EXPR
        </catch.return>
        <catch.then event=EVENT_NAME>
            PATTERN
            EXPR
        </catch.then>
        ...
        <catch.else>
            ...
        </catch.else>
    </try>


Representing Events
-------------------
Events will be represented as symbols, at least for the moment.

Implementing Escapes
--------------------
Escapes will be implemented with two new instructions: BYPASS and ESCAPE. The 
BYPASS instruction is functionally identical to a goto. However the ESCAPE
instruction will inspect the instruction that the parent procedure is 
executing and if it is a BYPASS it will modify the return address to 
continue past (i.e. bypass) that instruction. 

In other words a normal return will execute the BYPASS instruction, which 
will cause a jump to the normal continuation, and an escape will cause a
skip to the immediately following code, which will be the escape handling code.



Stephen Leach, 9th Dec 2011
Revised 22nd Nov 2012, May 2013
