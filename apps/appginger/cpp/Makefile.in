prefix=@prefix@
exec_prefix=@prefix@
datarootdir=@datarootdir@
PACKAGE_TARNAME=@PACKAGE_TARNAME@
INSTALL_BIN=@bindir@
INSTALL_TOOL=@libexecdir@/@PACKAGE_TARNAME@
INSTALL_LIB=@datarootdir@/@PACKAGE_TARNAME@
INSTALL_DOC=@docdir@

#LICENSE_FILE="$(INSTALL_LIB)/COPYING"
#LICENSE_FILE="$(INSTALL_LIB)/COPYING"

CC=@CXX@

INSTALLDIRS=-DINSTALL_BIN='"$(INSTALL_BIN)"' -DINSTALL_LIB='"$(INSTALL_LIB)"' -DINSTALL_TOOL='"$(INSTALL_TOOL)"'

CXXFLAGS=-DRUDECGI $(INSTALLDIRS) -g -I../hpp -I../../libgng/hpp -I../../automatic/machine -I../../automatic/sys -I../../automatic/simple -Wall -Wnon-virtual-dtor
CFLAGS=-Wmissing-prototypes

OBJS=vident.o codegen.o \
	functor.o cage.o registers.o roots.o cmp.o \
	rcep.o label.o package.o \
	sys.o syskey.o sysclass.o sysequals.o sysprint.o syslist.o sysvector.o \
	sysstring.o syssymbol.o sysmap.o sysindirection.o sysinstance.o \
	syselement.o syscheck.o sysexception.o sysdouble.o \
	syscgi.o sysattrmap.o sysmixed.o \
	sysfunction.o sysmethod.o sysunix.o \
	destination.o heap.o key.o \
	misclayout.o listlayout.o \
	maplayout.o functionlayout.o \
	vectorlayout.o stringlayout.o wrecordlayout.o \
	heapcrawl.o cagecrawl.o callstackcrawl.o fnobjcrawl.o \
	garbagecollect.o scanfunc.o scanpkg.o \
	machine.o instruction_set.o \
	machine1.o instruction_set1.o \
	machine2.o instruction_set2.o \
	machine3.o instruction_set3.o \
	machine4.o instruction_set4.o \
	appcontext.o \
	makesysfn.o \
	toolmain.o

USEREXECUTABLES=appginger ginger-cgi ginger-script ginger-cli ginger ginger-info

all: $(USEREXECUTABLES)

################################################################################
# We need to disable optimisations based on non-overflow of integer 
# arithmetic when compiling the machine implementations. That entails
# adding the -fwrapv flag.
################################################################################

machine%.o: machine%.cpp
	g++ $(CXXFLAGS) -fwrapv -c $<

instruction_set%.o: instruction_set%.cpp
	g++ $(CXXFLAGS) -fwrapv -c $<


################################################################################
# 	Main executables
################################################################################

# $@ is make shorthand for the target.
# $@ is make shorthand for the dependencies
appginger: libappginger.a main.o
	ranlib libappginger.a ../../libgng/cpp/libgng.a
	@CXX@ $(CXXFLAGS) $(BOOST_CPPFLAGS) -o $@ main.o libappginger.a ../../libgng/cpp/libgng.a /usr/local/lib/librudecgi.a

ginger-info: libappginger.a infomain.o
	ranlib libappginger.a ../../libgng/cpp/libgng.a
	@CXX@ $(CXXFLAGS) $(BOOST_CPPFLAGS) -o $@ infomain.o libappginger.a ../../libgng/cpp/libgng.a /usr/local/lib/librudecgi.a

ginger-cli: libappginger.a climain.o
	ranlib libappginger.a ../../libgng/cpp/libgng.a
	@CXX@ $(CXXFLAGS) $(BOOST_CPPFLAGS) -o $@ climain.o libappginger.a ../../libgng/cpp/libgng.a /usr/local/lib/librudecgi.a

ginger-cgi: libappginger.a cgimain.o
	ranlib libappginger.a ../../libgng/cpp/libgng.a
	@CXX@ $(CXXFLAGS) $(BOOST_CPPFLAGS) -o $@ cgimain.o libappginger.a ../../libgng/cpp/libgng.a /usr/local/lib/librudecgi.a

ginger-script: libappginger.a scriptmain.o
	ranlib libappginger.a ../../libgng/cpp/libgng.a
	@CXX@ $(CXXFLAGS) $(BOOST_CPPFLAGS) -o $@ scriptmain.o libappginger.a ../../libgng/cpp/libgng.a /usr/local/lib/librudecgi.a

ginger:
	echo "#!/bin/sh" > ginger-tmp
	echo 'echo "Ginger: @PACKAGE_VERSION@, Copyright (c) 2010  Stephen Leach"' >> ginger-tmp
	echo 'echo "+----------------------------------------------------------------------+"'  >> ginger-tmp
	echo 'echo "| This program comes with ABSOLUTELY NO WARRANTY. It is free software, |"' >> ginger-tmp
	echo 'echo "| and you are welcome to redistribute it under certain conditions.     |"' >> ginger-tmp
	echo 'echo "| Use option --help=license for details.                               |"' >> ginger-tmp
	echo 'echo "+----------------------------------------------------------------------+"' >> ginger-tmp
	echo `which rlwrap`\ -pGreen\ -S\'\>\>\>\ \'\ $(INSTALL_TOOL)/ginger-cli -q $$\@ >> ginger-tmp
	chmod a-w,a+x ginger-tmp
	mv ginger-tmp ginger

clean:
	rm -f *.o
	rm -f $(USEREXECUTABLES)
	rm -f *.a

#	Nothing needs doing.
check:
	
libappginger.a: $(OBJS)
	ar -rcs $@ $+
