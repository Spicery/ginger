Ref * sysNewElement( Ref * pc, class MachineClass * vm ) {
    const int N = vm->count;
    const int length = N - 1;
    if ( length >= 0 ) {
        XfrClass xfr( vm->heap().preflight( pc, N + 2 ) );
        xfr.xfrRef( LongToSmall( length ) );
        xfr.setOrigin();
        xfr.xfrRef( sysElementKey );
        xfr.xfrCopy( ++vm->vp -= N, N );
        vm->fastSet( xfr.makeRef() );
        return pc;
    } else {
        throw Mishap( "Wrong number of arguments for sysNewElement" );
    }
}

Ref * sysIsElement( Ref * pc, class MachineClass * vm ) {
    if ( vm->count == 1 ) {
        Ref r = vm->fastPeek();
        vm->fastPeek() = IsElement( r ) ? SYS_TRUE : SYS_FALSE;
        return pc;
    } else {
        throw Mishap( "Wrong number of arguments for recogniser" );
    }
}
Ref * sysElementAttrMapField( Ref * pc, class MachineClass * vm ) {
    if ( vm->count == 1 ) {
        Ref x = vm->fastPeek();
        if ( IsElement( x ) ) {
            vm->fastPeek() = RefToPtr4( x )[ 1 ];
        } else {
            throw Mishap( "Trying to take the elementAttrMap of non-Element" );
        }
        return pc;
    } else {
        throw Mishap( "Wrong number of arguments" );
    }
}

Ref * sysIndexElement( Ref * pc, MachineClass * vm ) {
   if ( vm->count == 2 ) {
       Ref n = vm->fastPop();
       Ref v = vm->fastPeek();
       Ref * p = RefToPtr4( v );
       if ( IsObj( v ) && *RefToPtr4( v ) == sysElementKey ) {
           if ( IsSmall( n ) && LongToSmall( 1 ) <= n && n <= p[ -1 ] ) {
               vm->fastPeek() = p[ 1 + SmallToLong( n ) ];
           } else {
               throw Mishap( "Small integer index needed" );
           }
           return pc;       } else {
           throw Mishap( "Vector needed" );
       }
   } else {
       throw Mishap( "Wrong number of arguments for index" );
   }
}
