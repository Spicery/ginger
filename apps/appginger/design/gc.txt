Notes on the Ginger Garbage Collector
=====================================

Overview
--------

The garbage collector is a variant on a basic Cheney-style stop-and-copy 
collector. There are four main reasons for using this algorithm: it is simple to 
code, dead objects are not traced and entail no cost, it is easy to make good 
expand-versus-shrink memory decisions and will not blow out the C++ callstack due 
to recursion. 

The VM uses a heap build on top of subheaps called “cages”. Cages are very large 
areas of memory (>1MB) that are themselves managed by C++’s new/delete. The 
fragmentation of the heap means we have to complicate the algorithm a little. 
Here’s how it all works:- 

When the VM tries to allocate an object, it finds a cage that is suitable for 
that object.  If a suitable cage is available, all well and good. If no suitable 
cage exists, however, it makes a choice between adding a new cage or garbage 
collecting.

At the moment this choice is always made in favour of garbage collection. In the 
future it will be based on the ratio of GC time to total time, much as in Poplog 
plus some overriding criteria.  And a good example of an override would be when 
allocating large objects, which would typically be allocated in their own new 
cage regardless of the situation.

Phases of the Garbage Collector
-------------------------------

The first phase of the garbage collector is to separate all the cages into two 
groups: those that are in use and those that are empty. These become the 
“from-cages” and the “to-cages”. If there are no empty cages then new cages are 
created on demand.

The main phase of the garbage collector interleaves two operations: “forwarding” 
with “scanning”. 

-	Forwarding means to copy an object from one of the from-cages onto the 
growing point of a to-cage AND leave a ‘forwarding address’ behind (which is 
space efficient but damages the old object).  A forwarded copy is in a limbo 
state. Although it lives in a to-cage, all its internal pointers are into the old 
from-cages. 

-	Scanning means iterating across all the internal pointers of a forwarded 
object and replaces them with the new addresses. If the pointer is to an object 
that has already been forward, this just means replacing with the forwarded 
address. If it hasn’t been forwarded, then forwarding is immediately performed.

-	Each to-cage keeps track of its limbo objects (forwarded but not scanned) by 
maintaining a start-of-limbo pointer  in addition to its growing point. Limbo 
objects are added at the growing point and scanned at the start-of-limbo. When an 
object has been scanned, the start-of-limbo pointer is bumped past the object. 
When the start-of-limbo pointer catches up with the growing-point, there are 
objects left in limbo.

The second phase initialises the main phase by forwarding all the “root pointers” 
of the virtual machine. At that moment, the to-cages are loaded with a queue of 
limbo objects from which all accessible store can be reached. One complication is 
that some of the fields of the virtual machine are pointers into the middle of 
objects. These unrestricted-pointers have to be “frozen” into a pointer to an 
object and its offset.

The main phase is then to repeatedly select a limbo object, remove it from limbo 
and scan it, until there are no more limbo objects left to select. Because the 
to-cages maintain a queue of limbo objects, the algorithm is not at all recursive 
but just a simple loop. This has the minor benefit of eliminating the risk of 
blowing out the C++ callstack.

After this we have a fourth melting phase, where the frozen unrestricted pointers 
are reconstituted from their freeze-dried parts.

Finally, during the garbage collection cycle the from-cages have their contents 
irrevocably trashed by the forwarding pointers. Hence the last phase of garbage 
collection resets all the from-cages as empty.

Object Layout
-------------
Objects contingous areas of store in the heap. They are referenced by (tagged) 
pointers, called Refs. These point at a special location called the key of the 
object. The key describes the fields of the object and loosely speaking is
equivalent to the object's class.

For record types the key is the first field of the object and the object has 
a fixed number of fields beyond that. However, other types such as vectors
have some fields before the key (e.g. length) and a variable numbers of fields
after the key.

This general scheme is constrained by our design goal of being able to perform
a scan of all the objects in a cage, called a cage-crawl. This imposes a design
constraint on the layout of fields before the key.



