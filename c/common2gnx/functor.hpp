#ifndef FUNCTOR_H
#define FUNCTOR_H

typedef enum Functor {
     fnc___fnc_default,
     fnc__print,
     fnc__putchar,
     fnc_eof,
     fnc_absand,
     fnc_absent,
     fnc_absnot,
     fnc_absor,
     fnc_add,
     fnc_and,
     fnc_anon,
     fnc_app,
     fnc_append,
     fnc_appspc,
     fnc_args,
     fnc_arrow,
     fnc_assign,
     fnc_at,
     fnc_bind,
     fnc_bindings,
     fnc_bool,
     fnc_cbrace,
     fnc_cbracket,
     fnc_char,
     fnc_charseq,
     fnc_comma,
     fnc_conditions,
     fnc_const,
     fnc_cparen,
     fnc_define,
     fnc_div,
     fnc_do,
     fnc_dot,
     fnc_else,
     fnc_elseif,
     fnc_elseunless,
     fnc_enddefine,
     fnc_endfn,
     fnc_endfor,
     fnc_endif,
     fnc_endunless,
     fnc_equal,
     fnc_fn,
     fnc_for,
     fnc_from,
     fnc_gt,
     fnc_gte,
     fnc_id,
     fnc_identical,
     fnc_if,
     fnc_int,
     fnc_lt,
     fnc_lte,
     fnc_mul,
     fnc_not,
     fnc_obrace,
     fnc_obracket,
     fnc_oparen,
     fnc_or,
     fnc_pow,
     fnc_present,
     fnc_semi,
     fnc_skip,
     fnc_string,
     fnc_sub,
     fnc_syscall,
     fnc_then,
     fnc_to,
     fnc_unless,
     fnc_until,
     fnc_var,
     fnc_while
} Functor;

const char *functor_name( Functor fnc );
const char *functor_as_tag( Functor fnc );
const char *functor_as_sysapp( Functor fnc );
const char *functor_as_type( Functor fnc );
//const char *functor_as_value( Functor fnc );

#endif
